# -*- coding: utf-8 -*-
"""Clase2_p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gLZ4ciIo-dg3LKYI4IEgFyhuhANwLkkT

Clase 2, ejercicio 1
"""

import pandas as pd
import numpy as npa
import matplotlib.pyplot as plt
import seaborn as sns
import statistics as stt

from google.colab import files
#uploaded = files.upload()

url = 'https://raw.githubusercontent.com/manlio99/Materia-de-aprendizaje/master/4_DataWrangling/data/casos_covid_bahia.csv'
df_camas = pd.read_csv(url)
#df_camas.info()
print(df_camas.describe())
print()
delete_cols = ["fecha", "aprehendidos"] # se eliminan los features no utiles
df_camas = df_camas.drop(columns = delete_cols)
print(df_camas.shape)
print()
fils, cols = df_camas.shape        # nro de fils y cols
features = df_camas.columns.values
print(features)

from scipy.stats import normaltest

# Se analiza un conjunto de datos para determinar si tienen distribucion normal

def print_hist(data, data_name, ax):
    
    # Con este criterio se asume que los datos tienen una distribucion normal
    # si p_value>0.5
    stat, p_value = normaltest(data)
    
    if p_value > 0.05: 
      normal = True
      sns.histplot(data, kde=True, ax=ax, color='green')
      ax.set_title(data_name + ' (Posee D. Normal)')
    else: 
      normal = False
      sns.histplot(data, kde=True, ax=ax, color='red')
      ax.set_title(data_name + ' (NO Posee D. Normal)')
    
    return normal

# Imprime cada feature del dataset informando si tiene distribucion normal o no

def DF_analysis(df, fig_fils, fig_cols):
    
    features = df.columns
    fig, axes = plt.subplots(fig_fils, fig_cols, figsize=(15,15))
    axes = axes.ravel()

    count = 0

    for feature, ax in zip(features, axes):
        if print_hist(df[feature], feature, ax)==True : count = count + 1

    print("Features con distribuciÃ³n normal: ",count)

    fig.suptitle('Analisis de cada feature')
    plt.show()

# Se muestra cada feature en un histograma y se analiza si poseen 
#distribucion normal
DF_analysis(df_camas, 3, 3)

from scipy.stats import skew

df_aux = pd.read_csv(url)
df_aux.drop(["fecha", "aprehendidos"], axis = 1, inplace = True)

# Se eliminan las features que no aportan informacion relevante

for i in range(1,cols):
  if skew(df_camas[features[i]]) > 1.65: 
   df_aux.drop(features[i], axis = 1, inplace = True)

print(df_aux.shape)
features_aux = df_aux.columns.values

# Se observan los histogramas del resto de los feautures
print(features)
print()
print(features_aux)
print()

DF_analysis(df_aux, 3, 3)